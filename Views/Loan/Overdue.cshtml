@model IEnumerable<BookLibraryApp.Models.ViewModels.LoanViewModel>

@{
    ViewData["Title"] = "Overdue Loans Report";
}

<h1>Overdue Loans</h1>

<p class="text-danger lead">
    The following @Model.Count() books are currently overdue.
</p>

<p>
    <a asp-action="Index">Back to Full Loan History</a>
</p>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.BookTitle)</th>
            <th>@Html.DisplayNameFor(model => model.PatronFullName)</th>
            <th>@Html.DisplayNameFor(model => model.DueDate)</th>
            <th>Days Overdue</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (!Model.Any())
        {
            <tr>
                <td colspan="5" class="text-center text-success">🎉 All active loans are currently on time!</td>
            </tr>
        }
        @foreach (var item in Model)
        {
            // Calculate days overdue
            var daysOverdue = (DateTime.Now.Date - item.DueDate.Date).Days;
            
            <tr class="table-danger">
                <td>@Html.DisplayFor(modelItem => item.BookTitle)</td>
                <td>@Html.DisplayFor(modelItem => item.PatronFullName)</td>
                <td>@Html.DisplayFor(modelItem => item.DueDate)</td>
                <td>
                    <span class="badge bg-danger">@daysOverdue days</span>
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.LoanId" class="btn btn-sm btn-info">Details</a>
                    
                    @* Form to return the book directly from the report *@
                    <form asp-action="Return" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@item.LoanId" />
                        <button type="submit" class="btn btn-sm btn-success">Mark as Returned</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>