//using BookLibraryApp.Data;
using BookLibraryApp.Models.Entities;
using BookLibraryApp.Models.ViewModels;
using BookLibraryApp.Services;
using Microsoft.EntityFrameworkCore;

// This class implements the contract defined in IPatronService
public class PatronService : IPatronService
{
    private readonly LibraryDbContext _context;

    public PatronService(LibraryDbContext context)
    {
        _context = context;
    }

    // 1. Get All Patrons: Retrieves all entities and maps them to ViewModels.
    public async Task<IEnumerable<PatronViewModel>> GetAllPatrons()
    {
        return await _context.Patrons
            .Select(p => new PatronViewModel
            {
                PatronId = p.PatronId,
                FirstName = p.FirstName,
                LastName = p.LastName,
                Email = p.Email,
                PhoneNumber = p.PhoneNumber
            })
            // Asynchronously execute the query and return the list.
            .ToListAsync();
    }

    // 2. Get Patron by ID: Finds a single entity and maps it to a ViewModel.
    public async Task<PatronViewModel?> GetPatronById(int id)
    {
        var patron = await _context.Patrons.FindAsync(id);

        if (patron == null)
        {
            return null;
        }

        // Mapping Entity to ViewModel
        return new PatronViewModel
        {
            PatronId = patron.PatronId,
            FirstName = patron.FirstName,
            LastName = patron.LastName,
            Email = patron.Email,
            PhoneNumber = patron.PhoneNumber
        };
    }

    // 3. Add New Patron: Maps the ViewModel to an Entity, adds it, and saves changes.
    public async Task AddPatron(PatronViewModel model)
    {
        // Mapping ViewModel to Entity
        var newPatron = new Patron
        {
            FirstName = model.FirstName,
            LastName = model.LastName,
            Email = model.Email,
            PhoneNumber = model.PhoneNumber
            // PatronId is auto-generated by the database
        };

        _context.Patrons.Add(newPatron);
        // Asynchronously save the changes to the database.
        await _context.SaveChangesAsync();
    }

    // 4. Update Existing Patron: Finds the entity, updates its properties, and saves changes.
    public async Task<bool> UpdatePatron(PatronViewModel model)
    {
        var existingPatron = await _context.Patrons.FindAsync(model.PatronId);

        if (existingPatron == null)
        {
            // Return false if the patron doesn't exist
            return false;
        }

        // Update the entity properties from the ViewModel
        existingPatron.FirstName = model.FirstName;
        existingPatron.LastName = model.LastName;
        existingPatron.Email = model.Email;
        existingPatron.PhoneNumber = model.PhoneNumber;

        // Save changes and return true for success
        await _context.SaveChangesAsync();
        return true;
    }

    // 5. Delete Patron: Finds the entity, removes it, and saves changes.
    public async Task<bool> DeletePatron(int id)
    {
        var patron = await _context.Patrons.FindAsync(id);

        if (patron == null)
        {
            return false;
        }

        _context.Patrons.Remove(patron);
        await _context.SaveChangesAsync();
        return true;
    }
}